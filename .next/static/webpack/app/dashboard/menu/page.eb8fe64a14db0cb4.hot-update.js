"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/dashboard/menu/page",{

/***/ "(app-pages-browser)/./lib/services/ocr.ts":
/*!*****************************!*\
  !*** ./lib/services/ocr.ts ***!
  \*****************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OCRService: () => (/* binding */ OCRService)\n/* harmony export */ });\n/* harmony import */ var _lib_supabase_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/supabase/client */ \"(app-pages-browser)/./lib/supabase/client.ts\");\n\nclass OCRService {\n    async extractText(imageUrl) {\n        try {\n            const response = await fetch(\"\".concat(this.endpoint, \"/vision/v3.2/ocr?language=en&detectOrientation=true\"), {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Ocp-Apim-Subscription-Key': this.apiKey\n                },\n                body: JSON.stringify({\n                    url: imageUrl\n                })\n            });\n            if (!response.ok) {\n                throw new Error('Failed to extract text from image');\n            }\n            const data = await response.json();\n            return this.processOCRResponse(data);\n        } catch (error) {\n            console.error('OCR extraction error:', error);\n            throw error;\n        }\n    }\n    processOCRResponse(data) {\n        const results = [];\n        if (data.regions) {\n            for (const region of data.regions){\n                for (const line of region.lines){\n                    for (const word of line.words){\n                        results.push({\n                            text: word.text,\n                            boundingBox: this.parseBoundingBox(word.boundingBox),\n                            confidence: word.confidence || 0.0\n                        });\n                    }\n                }\n            }\n        }\n        return results;\n    }\n    parseBoundingBox(boundingBox) {\n        const [x, y, width, height] = boundingBox.split(',').map(Number);\n        return {\n            x,\n            y,\n            width,\n            height\n        };\n    }\n    async parseMenuItems(results) {\n        const items = [];\n        let currentItem = {};\n        // Group words by lines using y-coordinates\n        const lines = this.groupIntoLines(results);\n        for (const line of lines){\n            const text = line.map((r)=>r.text).join(' ');\n            // Try to identify price\n            const priceMatch = text.match(/\\$?\\d+\\.?\\d*/);\n            if (priceMatch) {\n                if (currentItem.name) {\n                    currentItem.price = parseFloat(priceMatch[0].replace('$', ''));\n                    items.push(currentItem);\n                    currentItem = {};\n                }\n                continue;\n            }\n            // If we have a price but no description, the previous line was probably a description\n            if (!currentItem.description && currentItem.name && !currentItem.price) {\n                currentItem.description = text;\n                continue;\n            }\n            // If we don't have a name yet, this line is probably a name\n            if (!currentItem.name) {\n                currentItem.name = text;\n            }\n        }\n        // Add the last item if it exists\n        if (currentItem.name && currentItem.price) {\n            items.push(currentItem);\n        }\n        return items;\n    }\n    groupIntoLines(results) {\n        var _sortedResults_;\n        const lineThreshold = 10; // pixels\n        const sortedResults = [\n            ...results\n        ].sort((a, b)=>a.boundingBox.y - b.boundingBox.y);\n        const lines = [];\n        let currentLine = [];\n        let lastY = (_sortedResults_ = sortedResults[0]) === null || _sortedResults_ === void 0 ? void 0 : _sortedResults_.boundingBox.y;\n        for (const result of sortedResults){\n            if (Math.abs(result.boundingBox.y - lastY) > lineThreshold) {\n                if (currentLine.length > 0) {\n                    lines.push(currentLine.sort((a, b)=>a.boundingBox.x - b.boundingBox.x));\n                    currentLine = [];\n                }\n                lastY = result.boundingBox.y;\n            }\n            currentLine.push(result);\n        }\n        if (currentLine.length > 0) {\n            lines.push(currentLine.sort((a, b)=>a.boundingBox.x - b.boundingBox.x));\n        }\n        return lines;\n    }\n    async validateResults(items) {\n        const errors = [];\n        const warnings = [];\n        for (const [index, item] of items.entries()){\n            // Validate name\n            if (!item.name || item.name.length < 2) {\n                errors.push(\"Item \".concat(index + 1, \": Invalid or missing name\"));\n            }\n            // Validate price\n            if (!item.price || item.price <= 0) {\n                errors.push(\"Item \".concat(index + 1, \": Invalid or missing price\"));\n            }\n            // Add warnings for potentially problematic items\n            if (item.price > 1000) {\n                warnings.push(\"Item \".concat(index + 1, \": Unusually high price - please verify\"));\n            }\n            if (item.name.length > 100) {\n                warnings.push(\"Item \".concat(index + 1, \": Unusually long name - please verify\"));\n            }\n        }\n        return {\n            isValid: errors.length === 0,\n            errors,\n            warnings\n        };\n    }\n    constructor(){\n        this.supabase = (0,_lib_supabase_client__WEBPACK_IMPORTED_MODULE_0__.createClient)();\n        this.apiKey = \"D7N1PWokezDzKlqljJ22Fd2MMk4uh0bSXPQOwPdxkb1hGFfu5ik4JQQJ99BAACYeBjFXJ3w3AAALACOGnKGS\" || 0;\n        this.endpoint = \"https://restaurantocr.cognitiveservices.azure.com/\" || 0;\n        if (!this.apiKey || !this.endpoint) {\n            throw new Error('Azure Computer Vision credentials not configured');\n        }\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/services/ocr.ts\n"));

/***/ })

});